conteudos_educacionais = {
    "ciberseguranca": """üîê Introdu√ß√£o √† Ciberseguran√ßa

1. O que √© ciberseguran√ßa?
Ciberseguran√ßa √© o conjunto de pr√°ticas e tecnologias que protegem sistemas, redes e dados digitais contra acessos n√£o autorizados, ataques cibern√©ticos e vazamentos de informa√ß√µes.

2. Exemplos de amea√ßas:
- Phishing: tentativas de enganar usu√°rios para obter dados sens√≠veis.
- Ransomware: v√≠rus que sequestra dados e exige resgate.
- Engenharia social: manipula√ß√£o psicol√≥gica para acesso indevido.

3. Boas pr√°ticas:
- Usar senhas fortes e √∫nicas.
- Habilitar autentica√ß√£o de dois fatores.
- Manter sistemas e antiv√≠rus atualizados.
- Evitar clicar em links desconhecidos ou baixar arquivos suspeitos.

4. Import√¢ncia:
Proteger dados pessoais, evitar preju√≠zos financeiros e garantir a seguran√ßa de organiza√ß√µes e indiv√≠duos.
""",

    "lgpd": """üõ°Ô∏è LGPD - Lei Geral de Prote√ß√£o de Dados

1. O que √© a LGPD?
A Lei Geral de Prote√ß√£o de Dados (Lei n¬∫ 13.709/2018) regulamenta o tratamento de dados pessoais no Brasil, garantindo transpar√™ncia e seguran√ßa aos titulares dos dados.

2. Direitos do titular:
- Acesso aos seus dados pessoais.
- Corre√ß√£o de informa√ß√µes incorretas.
- Portabilidade entre servi√ßos.
- Exclus√£o dos dados quando solicitado.

3. Princ√≠pios da LGPD:
- Finalidade: uso espec√≠fico e leg√≠timo dos dados.
- Necessidade: limitar a coleta ao m√≠nimo necess√°rio.
- Seguran√ßa: ado√ß√£o de medidas para proteger os dados.

4. Autoridade reguladora:
A ANPD (Autoridade Nacional de Prote√ß√£o de Dados) fiscaliza e orienta o cumprimento da LGPD.
""",

    "sustentabilidade": """üå± Sustentabilidade na Tecnologia

1. O que √© sustentabilidade digital?
√â o uso consciente e respons√°vel da tecnologia com o objetivo de reduzir impactos ambientais e promover o desenvolvimento sustent√°vel.

2. Pr√°ticas sustent√°veis:
- Economia de energia: desligar dispositivos quando n√£o usados.
- Reciclagem de eletr√¥nicos: descarte correto e reaproveitamento de componentes.
- Uso de software eficiente: evitar programas que consomem muitos recursos.

3. TI Verde:
Pol√≠tica adotada por empresas para reduzir o consumo de energia e materiais, contribuindo para um futuro mais sustent√°vel.

4. Consumo consciente:
Avaliar a real necessidade antes de comprar novos dispositivos e prolongar a vida √∫til dos equipamentos.
""",

    "python": """üêç Introdu√ß√£o ao Python

1. O que √© Python?
Python √© uma linguagem de programa√ß√£o de alto n√≠vel, com sintaxe simples e clara, muito utilizada em diversas √°reas como automa√ß√£o, web, ci√™ncia de dados, intelig√™ncia artificial e muito mais.

2. Caracter√≠sticas principais:
- Sintaxe f√°cil de ler e escrever.
- Interpretada: n√£o requer compila√ß√£o.
- Ampla comunidade e muitas bibliotecas dispon√≠veis.

3. Exemplo de c√≥digo:
```python
nome = input("Qual √© o seu nome? ")
print(f"Ol√°, {nome}! Seja bem-vindo ao mundo do Python.")

```

4. √Åreas de aplica√ß√£o:
- Desenvolvimento web (Django, Flask)
- An√°lise de dados (Pandas, NumPy)
- Rob√≥tica e automa√ß√£o
- Educa√ß√£o e prototipagem
""",

    "scratch": """üéÆ Introdu√ß√£o ao Scratch

1. O que √© Scratch?
Scratch √© uma linguagem de programa√ß√£o visual criada pelo MIT que permite criar hist√≥rias interativas, jogos e anima√ß√µes de forma intuitiva.

2. Como funciona?
Ao inv√©s de digitar c√≥digos, voc√™ monta os programas arrastando blocos com instru√ß√µes para dentro de uma √°rea de scripts.

3. Benef√≠cios do Scratch:
- Ideal para iniciantes e crian√ßas.
- Desenvolve racioc√≠nio l√≥gico.
- Estimula criatividade e resolu√ß√£o de problemas.

4. Exemplo de sequ√™ncia:
- Quando a bandeira verde for clicada:
  - Dizer "Ol√°, mundo!"
  - Esperar 2 segundos
  - Mover 10 passos
""",

    "logica": """üß† Fundamentos da L√≥gica de Programa√ß√£o

1. O que √© l√≥gica de programa√ß√£o?
√â a base para escrever programas que resolvam problemas de forma organizada, clara e eficiente, usando estruturas como algoritmos, decis√µes e repeti√ß√µes.

2. Conceitos b√°sicos:
- Sequ√™ncia: execu√ß√£o linear de comandos.
- Condi√ß√£o (if/else): tomada de decis√£o com base em crit√©rios.
- Repeti√ß√£o (la√ßos): execu√ß√£o de comandos v√°rias vezes (for/while).

3. Pseudoc√≥digo:
Linguagem estruturada pr√≥xima do portugu√™s usada para planejar algoritmos:
```pseudoc√≥digo
Inicio
    Leia A
    Leia B
    Soma <- A + B
    Escreva Soma
Fim
```

4. Fluxogramas:
Diagramas com s√≠mbolos gr√°ficos que representam a sequ√™ncia l√≥gica de um algoritmo.
"""
}
